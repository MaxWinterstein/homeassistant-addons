name: "Custom / Actions"

on:
  issue_comment:
    types: [created]
jobs:
  custom_actions:
    if: github.event_name == 'issue_comment' && 
        (startsWith(github.event.comment.body, '/release') || 
         startsWith(github.event.comment.body, '/foo')) && 
        github.event.comment.user.login == 'MaxWinterstein'
    runs-on: ubuntu-latest

    steps:
      - name: Add 👍 reaction to the comment
        uses: actions/github-script@v7
        with:
          script: |
            const commentId = context.payload.comment.id;
            
            // Add a thumbs-up reaction to the comment
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: commentId,
              content: "rocket"
            });
          github-token: ${{ secrets.GH_PAT_MAXWINTERSTEINBOT }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT_MAXWINTERSTEINBOT }}

      - name: Get mentioned Addon
        if: startsWith(github.event.comment.body, '/release')
        id: get_addon
        env:
          ISSUE_BODY: ${{ github.event.issue.body }}
        run: |

          comment_body="${{ github.event.comment.body }}"
          PR_TITLE='${{ github.event.issue.title }}'
          ADDON=''

          # Check if the PR title has an add-on mentioned
          if [[ "$PR_TITLE" =~ \[([a-zA-Z0-9_-]+)\] ]]; then
            ADDON="${BASH_REMATCH[1]}"
            echo "Mentioned Addon from PR Title: $ADDON"
          elif [[ "$comment_body" =~ /release[[:space:]]([a-zA-Z0-9_-]+) ]]; then
            ADDON="${BASH_REMATCH[1]}"
            echo "Mentioned Addon from Comment Body: $ADDON"
          else
            echo "No valid add-on found"
            exit 1
          fi
          echo "::set-output name=addon::$ADDON"


          echo "Extracting JSON from PR body..."

          # Read the first line from the PR body file
          FIRST_LINE=$(printf "%s\n" "$ISSUE_BODY" | head -n 1)

          echo "Found JSON line:"
          echo "$FIRST_LINE"

          # Save to a file for jq parsing
          echo "$FIRST_LINE" > data.json

          # Parse values using jq
          BRANCH_NAME=$(jq -r '.prProperties.branchName' data.json)
          DEP_NAME=$(jq -r '.prProperties.depName' data.json)
          NEW_VERSION=$(jq -r '.prProperties.newVersion' data.json)

          echo "branchName: $BRANCH_NAME"
          echo "depName: $DEP_NAME"
          echo "newVersion: $NEW_VERSION"

          # Set outputs
          echo "branch-name=$BRANCH_NAME" >> "$GITHUB_OUTPUT"
          echo "dep-name=$DEP_NAME" >> "$GITHUB_OUTPUT"
          echo "new-version=$NEW_VERSION" >> "$GITHUB_OUTPUT"



      - name: Checkout the pull request branch
        if: startsWith(github.event.comment.body, '/release')
        uses: actions/checkout@v4
        with:
          ref: '${{ steps.get_addon.outputs.branch-name }}'
          fetch-depth: 0
          token: ${{ secrets.GH_PAT_MAXWINTERSTEINBOT }}
  
      - name: Extract version from config.yaml
        if: startsWith(github.event.comment.body, '/release')
        id: get_version
        uses: mikefarah/yq@v4.47.1  
        with:
          cmd: yq '.version' ${{ steps.get_addon.outputs.addon }}/config.yaml

      - name: Increment version
        if: startsWith(github.event.comment.body, '/release')
        id: increment_version
        run: |
          # Read current version and split it into major, minor, patch, and optionally build components
          IFS='.' read -r MAJOR MINOR PATCH BUILD <<< "${{ steps.get_version.outputs.result }}"
          
          # Increment the MINOR version
          MINOR=$((MINOR + 1))
          # BUILD=0  # Reset build number when MINOR is incremented
          PATCH=0  # Reset patch number when MINOR is incremented

          # Construct the new version
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          
          # Append build if it exists
          if [[ -n $BUILD ]]; then
              NEW_VERSION="$NEW_VERSION.0"
          fi
          
          # Print the updated version for logging purposes
          echo "Bumped version to $NEW_VERSION"
          echo "::set-output name=new_version::$NEW_VERSION"

      - name: Bump version in config.yaml
        if: startsWith(github.event.comment.body, '/release')
        uses: mikefarah/yq@v4.47.1  
        with:
          cmd: yq -i '.version = "${{ steps.increment_version.outputs.new_version }}"' ${{ steps.get_addon.outputs.addon }}/config.yaml

      - name: Install uv
        if: startsWith(github.event.comment.body, '/release')
        uses: astral-sh/setup-uv@v6
        with:
          # Install a specific version of uv.
          version: "0.8.13"

      - name: Set up Python
        if: startsWith(github.event.comment.body, '/release')
        run: uv python install

      - name: Install the project
        if: startsWith(github.event.comment.body, '/release')
        run: uv sync --all-extras --dev

      - name: Build towncrier
        if: startsWith(github.event.comment.body, '/release')
        run: |
          #  mv "${{ steps.get_addon.outputs.addon }}/CHANGELOG.md" CHANGELOG.md 
          uv run towncrier build --yes --dir "${{ steps.get_addon.outputs.addon }}/" --version "${{ steps.increment_version.outputs.new_version }}" --config pyproject.toml
          # mv CHANGELOG.md "${{ steps.get_addon.outputs.addon }}/CHANGELOG.md" 

      - name: Push changes
        if: startsWith(github.event.comment.body, '/release')
        uses: stefanzweifel/git-auto-commit-action@v6
        with:
          commit_message: "[${{ steps.get_addon.outputs.addon }}] Bumped version to ${{ steps.increment_version.outputs.new_version }}"
          token: ${{ secrets.GH_PAT_MAXWINTERSTEINBOT }}
          commit_user_name: MaxWintersteinBot # defaults to "github-actions[bot]"
          commit_user_email: 208604358+MaxWintersteinBot@users.noreply.github.comg # defaults to "41898282+github-actions[bot]@users.noreply.github.com"
          commit_author: Max Winterstein Bot <208604358+MaxWintersteinBot@users.noreply.github.com> # defaults to "username <numeric_id+username@users.noreply.github.com>", where "numeric_id" and "username" belong to the author of the commit that triggered the run
      